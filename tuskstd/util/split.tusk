;include:
;s tuskstd/util/slices.tusk

var split

ovld split = fn(string -> str, rune -> del) {
    ;split by a rune
    
    splitted := [""]

    each (str, k, v) {
        if (v == del) {
            splitted = append:(splitted, "")
            continue
        }

        splitted::(len:(splitted) - 1) = splitted::(len:(splitted) - 1) + v
    }

    return rmend:(splitted, 1)
}

ovld split = fn(string -> str, string -> del) {

    if (del == "") {
        ;special case where delimeter is every char
        ret := []
        each (str, _, v)
            ;go through the string, and cur by every char
            ret = append:(ret, string -> v)

        return ret
    }

    ;got the algorithm from here
    ;   https://hypjudy.github.io/2017/04/18/KMP-algorithm-split/#Naive-Pattern-Searching
    ;i just adapted it to tusk
    ;it is a naive method, but will do for now

    var res = [] ;store the result
    last := 0
    i := 0
    m := len:(str)
    n := len:(del)

    while (i < m) {
        find_sep := false
        if (str::(i) == del::0 && i + n <= m) {
            if (slice:(str, i, i + n) == del) {
                res = append:(res, slice:(str, last, i - last))
                i+=n
                last = i
                find_sep = true
            }
        }
        if (!find_sep) i++
    }

    res = append:(res, slice:(str, last, m)) ;append the last part
    return res
}