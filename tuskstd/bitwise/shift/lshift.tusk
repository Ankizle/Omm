;include:
;s tuskstd/bitwise
;s tuskstd/util/alloc.tusk

var bitwise = proto {
    static var lshift = fn(number -> n, number -> by, number -> size) {
        var bits = bitwise::tobits:(n)

        while (len:(bits) < size) bits = prepend:(bits, 0) ;make it have to same size (e.g. 64 bit makes it length 64)

        var nbits = alloc:(len:(bits))

        each (bits, k, v) {

            npos := k - by

            ;if its greater than the array length, don't put anything
            if (npos < 0) continue

            nbits::(npos) = v
        }

        return bitwise::frombits:(nbits) 
    }

    static ovld lshift = fn(number -> n, number -> by) {
        return bitwise::lshift:(n, by, 64) ;default 64 bits
    }
}