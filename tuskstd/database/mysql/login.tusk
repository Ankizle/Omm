;include:
;s tuskstd/util/search.tusk
;s tuskstd/crypto/sha/sha1.tusk
;r connect.tusk

var mysql = proto {

    ;authentication code also taken from here:
    ;   https://medium.com/@asayechemeda/communicating-with-mysql-database-using-tcp-sockets-a058937024a
    ;all i did was rewrite that driver into tusk, and make a few more bits

    var _hashpass = fn(string -> d, string -> p) {
        ;calculate hashed password
        ;SHA1( password ) XOR SHA1( "20-bytes random data from server" <concat> SHA1( SHA1( password ) ) )
        ;   https://dev.mysql.com/doc/internals/en/secure-password-authentication.html#packet-Authentication::Native41
        return sha::sha1:(p) ^ sha::sha1:(d + sha::sha1:(sha::sha1:(p)))
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    }

    var _get_auth_data = fn(int -> offset, int -> L2, string -> data) {
        auth1 := slice:(data, offset + 5, offset + 21)
        auth2 := slice:(data, offset + 32, offset + 32 + (L2 - 9))
        return auth1 + auth2
    }

    var _get_auth_method = fn(int -> offset, int -> L2, string -> data) {
        tmp := offset + 32 + (L2 - 8)
        offset = searchfor:(data, string -> (rune -> 0), tmp)
        return slice:(data, tmp, offset)
    }

    var authenticate = fn(string -> data) {

        ;config is declared in connect.tusk
        user := config::user
        pass := config::pass
        db := config::database
        if (!db) db = "" ;if the user didn't specify a database, put ""
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

        offset := searchfor:(data, string -> (rune -> 0), 5)
        L2 := int -> data::(offset + 21)

        auth_data := _get_auth_data:(offset, L2, data)
        auth_method := _get_auth_method:(offset, L2, data)
        hashed := _hashpass:(data, pass)

        length := 41 + len:(user) + len:(hashed) + len:(db) + len:(auth_data)
        buffer := alloc:(length)

        buffer::0 = rune -> (length - 4)
        buffer::3 = 1
        buffer::4 = 131592 
        buffer::8 = 0
        buffer::12 = 33

        each (user + (rune -> 0), k, v)
            buffer::(k + 36) = v

        buffer::(37 + len:(user)) = len:(hashed)

        each (hashed, k, v)
            buffer::(38 + len:(user) + k) = v

        each (db + (rune -> 0), k, v)
            buffer::(38 + len:(user) + len:(hashed)) = v

        buffer::(38 + len:(user) + len:(hashed) + len:(db)) = 0
        tmp := 39 + len:(user) + len:(hashed) + len:(db)

        each (auth_method + (rune -> 0), k, v)
            buffer::(tmp + k) = v

        bufints := alloc:(len:(buffer))
        each (buffer, k, v) bufints::(k) = int -> v

        syscall:(1, bufints, len:(buffer)) ;write()
    }
}