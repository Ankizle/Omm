;include:
;s tuskstd/util/search.tusk
;s tuskstd/crypto/sha/sha1.tusk
;r connect.tusk

var mysql = proto {

    ;authentication code also taken from here:
    ;   https://medium.com/@asayechemeda/communicating-with-mysql-database-using-tcp-sockets-a058937024a

    var _hashpass = fn(string -> d, string -> p) {
        ;calculate hashed password
        ;SHA1( password ) XOR SHA1( "20-bytes random data from server" <concat> SHA1( SHA1( password ) ) )
        ;   https://dev.mysql.com/doc/internals/en/secure-password-authentication.html#packet-Authentication::Native41
        return sha::sha1:(p) ^ sha::sha1:(d + sha::sha1:(sha::sha1:(p)))
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    }

    var _get_auth_data = fn(string -> data) {
        offset := searchfor:(data, string -> (rune -> 0), 5)
        auth1 := slice:(data, offset + 5, offset + 21)
    }

    var authenticate = fn(string -> data) {

        ;config is declared in connect.tusk
        user := config::user
        pass := config::pass
        db := config::database
        if (!db) db = "" ;if the user didn't specify a database, put ""
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

        auth_data := _get_auth_data:(data)
        hashed := _hashpass:(data, pass)

        syscall:(1, hashed, len:(hashed)) ;write()
    }
}