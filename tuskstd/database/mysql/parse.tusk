;include:
;s tuskstd/util/read_int_le.tusk
;s tuskstd/util/slices.tusk
;s tuskstd/crypto/hex.tusk
;r types.tusk

var mysql = proto {
    static var parse = fn(string -> data) {
        offset := 4
        nCols := 0

        nCols = mysql::enc_length:(data, offset)
        if (nCols != 0) return mysql::columns:(data, offset, nCols)
    }

    static var columns = fn(string -> data, int -> offset, int -> nColumns) {

        ;init variables
        colName := 0
        dataType := 0
        header := 0
        tmp := 0
        results := [:
            "fields" = [],
        :]
        ;;;;;;;;;;;;;;;

        i := 0
        while (i < nColumns) { ;each column
            offset+=4

            j := 0
            while (j < 6) {
                temp := mysql::len_enc_value:(data, offset)
                if (j == 5) colName = temp
                j++
            }

            offset+=7
            dataType = "0x" + (fn() {
                fin := ""
                each (data, _, v) fin+=tohex:(v)
                return fin
            }())
            results::fields = append:(results::fields, [:
                "name" = colName,
                "type" = mysql::types::(dataType)
            :])

            offset+=5
            i++
        }

        offset+=13
        header = data::(offset + 4)
        if (header == 255) panic:("Error while reading columns from mysql") ;error

        mysql::rows:(results, data, offset) ;fetch the rows
        return results
    }

    static var rows = fn(hash -> results, string -> data, int -> offset) {
        ;init variables
        row := 0
        temp := 0
        hasNext := offset < len:(data)
        nColumns := len:(results::fields)
        results::rows = []
        ;;;;;;;;;;;;;;;

        while (hasNext) {
            row = [::]
            i := 0
            while (i < nColumns) {
                temp = mysql::len_enc_value:(data, offset)
                row::(results::fields::(i)::name) = temp
                i++
            }

            results::rows = append:(results::rows, row)
            offset+=4
            if (data::(offset) == 254) panic:("Error while reading rows from mysql") ;error
        }
    }

    static var enc_length = fn(string -> data, int -> offset) {
        length := data::(offset)
        bytes := 0

        offset++

        if (length == 251) return undef
	    elif (length == 252 || length == 253)  {
		    bytes = length - 250	
		    length = read_int_le:(array -> data, offset, bytes)		
        }
        return length
	}

    static var len_enc_value = fn(string -> data, int -> offset) {
        length := data::(offset)
        end := 0

        offset++

        if (length == 251) return undef
        elif (len == 252 || len == 253) {
            length = length - 250
            length = read_int_le:(array -> data, offset, length)
        }

        tmp := clone:(offset)
        end := tmp + length
        offset = end
        return slice:(data, tmp, end)
    }
}