;include:
;s tuskstd/util
;s tuskstd/json/marshal.tusk
;r parse.tusk

var request = proto {

    static var bufsize = 1

    static var get = fn(uri) {
        parsed := url::parse:(uri)
        reqstr := "GET " + parsed::path + request::fmt_query:(parsed::query) + " " + toupper:(parsed::protocol) + "/1.1\r\nHost: " + parsed::host + "\r\nConnection: close\r\n\r\n"
        return request::request_url:(parsed, reqstr)
    }

    static var post = fn(uri, hash -> data) {
        parsed := url::parse:(uri)
        jsondata := json.marshal:(data)
        log:(data, jsondata)
        reqstr := "POST " + parsed::path + " " + toupper:(parsed::protocol) + "/1.1\r\nHost: " + parsed::host + "Content-Type: application/json\r\nContent-Length: " + (string -> len:(jsondata)) + "\r\nConnection: close\r\n\r\n" + jsondata
        return request::request_url:(parsed, reqstr)
    }

    static var fmt_query = fn(data) {
        ;convert a hashmap query into a ?a=b&c=d
        query_str := "?"

        i := 0 ;if i is the last query (in above example, c=d) then do not put an & after it
        each (data, k, v) {
            query_str+=k + "=" + v

            i++
            if (i != len:(data)) query_str+="&"
        }

        return query_str
    }

    static var request_url = fn(parsed, reqstr) {

        fd := syscall:(25, 2, 1, "tcp")

        ;connect the socket
        if (syscall:(26, fd, 2, parsed::host, parsed::port) == -1)
            panic:("Cannot connect to host " + parsed::host + " at port " + (string -> parsed::port))

        ;write to the socket
        if (syscall:(1, fd, reqstr, len:(reqstr)) == -1)
            panic:("Error writing request to socket")

        ;read the resp
        fin := ""  ;store the html resp
        buf := " " ;alloc 1 byte
        while (syscall:(0, fd, buf, 1) > 0) fin+=buf

        return fin
    }
}