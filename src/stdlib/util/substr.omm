var rmbegin: fn(string -> str, number -> amt) {
    substringed := ""

    strl := len(str) - 1
    camt := clone(amt)

    while (strl >= camt) {
        substringed: (string -> (str::(strl))) + substringed
        strl--
    }

    return substringed
}

var rmend: fn(string -> str, number -> amt) {
    substringed := ""

    camt := clone(amt) - 1

    while (camt >= 0) {
        substringed: (string -> (str::(camt))) + substringed
        camt--
    }

    return substringed
}

var rmfrom: fn(string -> str, number -> start, number -> end) {
    substringed := ""

    cstart := clone(start)
    cend := clone(end)

    while (cstart < cend) {
        substringed+=(str::(cstart))
        cstart++
    }

    return substringed
}
