[
  {
    "name": "local",
    "remove": "local",
    "pattern": "(local\\b(~?))",
    "type": "id"
  },
  {
    "name": "local",
    "remove": "lcl",
    "pattern": "(lcl\\b(~?))",
    "type": "id"
  },
  {
    "name": "kill",
    "remove": "kill",
    "pattern": "kill\\<-",
    "type": "kill"
  },
  {
    "name": "kill",
    "remove": "kill",
    "pattern": "kill\\;",
    "type": "kill"
  },
  {
    "name": "->",
    "remove": "->",
    "pattern": "(\\-\\>)",
    "type": "operation"
  },
  {
    "name": "<-",
    "remove": "<-",
    "pattern": "(\\<\\-)",
    "type": "operation"
  },
  {
    "name": "=>",
    "remove": "=>",
    "pattern": "(\\=\\>)",
    "type": "operation"
  },
  {
    "name": "++",
    "remove": "++",
    "pattern": "((?<!\\d)\\+\\+)",
    "type": "?operation"
  },
  {
    "name": "+=",
    "remove": "+=",
    "pattern": "((?<!\\d)\\+\\=)",
    "type": "?operation"
  },
  {
    "name": "--",
    "remove": "--",
    "pattern": "((?<!\\d)\\-\\-)",
    "type": "?operation"
  },
  {
    "name": "-=",
    "remove": "-=",
    "pattern": "((?<!\\d)\\-\\-)",
    "type": "?operation"
  },
  {
    "name": "*=",
    "remove": "*=",
    "pattern": "((?<!\\d)\\*\\=)",
    "type": "?operation"
  },
  {
    "name": "/=",
    "remove": "/=",
    "pattern": "((?<!\\d)\\/\\=)",
    "type": "?operation"
  },
  {
    "name": "^=",
    "remove": "^=",
    "pattern": "((?<!\\d)\\^\\=)",
    "type": "?operation"
  },
  {
    "name": "%=",
    "remove": "%=",
    "pattern": "((?<!\\d)\\%\\=)",
    "type": "?operation"
  },
  {
    "name": "each",
    "remove": "each",
    "pattern": "(each\\()",
    "type": "cond"
  },
  {
    "name": "~~~",
    "remove": "~~~",
    "pattern": "((~~~))",
    "type": "operation"
  },
  {
    "name": "~~",
    "remove": "~~",
    "pattern": "(~~)",
    "type": "operation"
  },
  {
    "name": "dynamic",
    "remove": "dyn",
    "pattern": "(dyn\\b(~?))",
    "type": "id"
  },
  {
    "name": "dynamic",
    "remove": "dynamic",
    "pattern": "(dynamic\\b(~?))",
    "type": "id"
  },
  {
    "name": "alt",
    "remove": "alt",
    "pattern": "(alt\\()",
    "type": "cond"
  },
  {
    "name": "log",
    "remove": "log",
    "pattern": "(log\\b(~?))",
    "type": "id"
  },
  {
    "name": "print",
    "remove": "print",
    "pattern": "(print\\b(~?))",
    "type": "id"
  },
  {
    "name": "this",
    "remove": "this",
    "pattern": "(this\\()",
    "type": "cproc"
  },
  {
    "name": "^",
    "remove": "**",
    "pattern": "(\\*\\*)",
    "type": "operation"
  },
  {
    "name": ".",
    "remove": ".",
    "pattern": "(\\.\\[)",
    "type": "operation"
  },
  {
    "name": "newlineN",
    "remove": "\n",
    "pattern": "\n",
    "type": "newline"
  },
  {
    "name": "newlineN",
    "remove": "\r\n",
    "pattern": "(\r\n)",
    "type": "newline"
  },
  {
    "name": "newlineS",
    "remove": ";",
    "pattern": "\\;",
    "type": "operation"
  },
  {
    "name": "~",
    "remove": "~",
    "pattern": "\\~",
    "type": "operation"
  },
  {
    "name": "[:",
    "remove": "[:",
    "pattern": "(\\[\\:)",
    "type": "?operation"
  },
  {
    "name": ":]",
    "remove": ":]",
    "pattern": "(\\:\\])",
    "type": "?operation"
  },
  {
    "name": ":::",
    "remove": ":::",
    "pattern": ":::",
    "type": "operation"
  },
  {
    "name": "regex.match",
    "remove": "regex.match",
    "pattern": "regex\\.match\\(",
    "type": "cproc"
  },
  {
    "name": "regex.replace",
    "remove": "regex.replace",
    "pattern": "regex\\.replace\\(",
    "type": "cproc"
  },
  {
    "name": "files.read",
    "remove": "files.read",
    "pattern": "files\\.read\\(",
    "type": "cproc"
  },
  {
    "name": "files.write",
    "remove": "files.write",
    "pattern": "files\\.write\\(",
    "type": "cproc"
  },
  {
    "name": "files.exists",
    "remove": "files.exists",
    "pattern": "files\\.exists\\(",
    "type": "cproc"
  },
  {
    "name": "files.isFile",
    "remove": "files.isFile",
    "pattern": "files\\.isFile\\(",
    "type": "cproc"
  },
  {
    "name": "files.isDir",
    "remove": "files.isDir",
    "pattern": "files\\.isDir\\(",
    "type": "cproc"
  },
  {
    "name": "::",
    "remove": "::",
    "pattern": "(\\:\\:)",
    "type": "operation"
  },
  {
    "name": ":",
    "remove": ":=",
    "pattern": "(\\:\\=)",
    "type": "assignment"
  },
  {
    "name": ":",
    "remove": ":",
    "pattern": "\\:",
    "type": "assignment"
  },
  {
    "name": "+",
    "remove": "+",
    "pattern": "((?<!([-+*\\/%^=!:({[~,<>&|])|^)\\+)",
    "type": "operation"
  },
  {
    "name": "-",
    "remove": "-",
    "pattern": "((?<!([-+*\\/%^=!:({[~,<>&|])|^)\\-)",
    "type": "operation"
  },
  {
    "name": "*",
    "remove": "*",
    "pattern": "\\*",
    "type": "operation"
  },
  {
    "name": "/",
    "remove": "/",
    "pattern": "\\/",
    "type": "operation"
  },
  {
    "name": "%",
    "remove": "%",
    "pattern": "\\%",
    "type": "operation"
  },
  {
    "name": "^",
    "remove": "^",
    "pattern": "\\^",
    "type": "operation"
  },
  {
    "name": "(",
    "remove": "(",
    "pattern": "\\(",
    "type": "?paren"
  },
  {
    "name": ")",
    "remove": ")",
    "pattern": "\\)",
    "type": "?paren"
  },
  {
    "name": "{",
    "remove": "{",
    "pattern": "\\{",
    "type": "?operation"
  },
  {
    "name": "}",
    "remove": "}",
    "pattern": "\\}",
    "type": "?operation"
  },
  {
    "name": "[",
    "remove": "[",
    "pattern": "\\[",
    "type": "?operation"
  },
  {
    "name": "]",
    "remove": "]",
    "pattern": "\\]",
    "type": "?operation"
  },
  {
    "name": "wait",
    "remove": "wait",
    "pattern": "(wait\\()",
    "type": "id_non_tilde"
  },
  {
    "name": "@",
    "remove": "@",
    "pattern": "(@\\b\\~)",
    "type": "caller"
  },
  {
    "name": "process",
    "remove": "proc",
    "pattern": "(proc\\b\\()",
    "type": "id"
  },
  {
    "name": "process",
    "remove": "proc",
    "pattern": "(proc\\b(~?))",
    "type": "id"
  },
  {
    "name": "global",
    "remove": "gbl",
    "pattern": "(gbl\\b(~?))",
    "type": "id"
  },
  {
    "name": "global",
    "remove": "global",
    "pattern": "(global\\b(~?))",
    "type": "id"
  },
  {
    "name": "#",
    "remove": "#",
    "pattern": "(\\#\\b(~))",
    "type": "caller"
  },
  {
    "name": ",",
    "remove": ",",
    "pattern": "\\,",
    "type": "operation"
  },
  {
    "name": "return",
    "remove": "return",
    "pattern": "(return\\b(~?))",
    "type": "id"
  },
  {
    "name": "return",
    "remove": "return",
    "pattern": "(return\\b;)",
    "type": "id_non_tilde"
  },
  {
    "name": "if",
    "remove": "if",
    "pattern": "(if\\()",
    "type": "cond"
  },
  {
    "name": "elseif",
    "remove": "elseif",
    "pattern": "(elseif\\()",
    "type": "cond"
  },
  {
    "name": "else",
    "remove": "else",
    "pattern": "(else(\\{|\\~))",
    "type": "cond"
  },
  {
    "name": "loop",
    "remove": "loop",
    "pattern": "(loop\\()",
    "type": "cond"
  },
  {
    "name": "<=",
    "remove": "<=",
    "pattern": "(\\<\\=)",
    "type": "operation"
  },
  {
    "name": ">=",
    "remove": ">=",
    "pattern": "(\\>\\=)",
    "type": "operation"
  },
  {
    "name": ">",
    "remove": ">",
    "pattern": "\\>",
    "type": "operation"
  },
  {
    "name": "<",
    "remove": "<",
    "pattern": "\\<",
    "type": "operation"
  },
  {
    "name": "!=",
    "remove": "!=",
    "pattern": "(\\!\\=)",
    "type": "operation"
  },
  {
    "name": "=",
    "remove": "==",
    "pattern": "(\\=\\=)",
    "type": "operation"
  },
  {
    "name": "=",
    "remove": "=",
    "pattern": "\\=",
    "type": "operation"
  },
  {
    "name": "import",
    "remove": "import",
    "pattern": "(import\\b(~?))",
    "type": "id"
  },
  {
    "name": "include",
    "remove": "include",
    "pattern": "(include\\b(~?))",
    "type": "id"
  },
  {
    "name": "read",
    "remove": "read",
    "pattern": "(read\\b(~?))",
    "type": "id"
  },
  {
    "name": "&",
    "remove": "&&",
    "pattern": "(\\&\\&)",
    "type": "operation"
  },
  {
    "name": "!|",
    "pattern": "(\\!\\|)",
    "type": "operation"
  },
  {
    "name": "$|",
    "remove": "$|",
    "pattern": "(\\$\\|)",
    "type": "operation"
  },
  {
    "name": "!$|",
    "remove": "$!|",
    "pattern": "(\\$\\!\\|)",
    "type": "operation"
  },
  {
    "name": "!$|",
    "remove": "!$|",
    "pattern": "(\\!\\$\\|)",
    "type": "operation"
  },
  {
    "name": "!&",
    "remove": "!&",
    "pattern": "(\\!\\&)",
    "type": "operation"
  },
  {
    "name": "|",
    "remove": "||",
    "pattern": "(\\|\\|)",
    "type": "operation"
  },
  {
    "name": "!",
    "remove": "!",
    "pattern": "\\!",
    "type": "?operation",
    "comment": "?operation is just notation for the error detector to not detect this as an operation"
  },
  {
    "name": "&",
    "remove": "&",
    "pattern": "\\&",
    "type": "operation"
  },
  {
    "name": "|",
    "remove": "|",
    "pattern": "\\|",
    "type": "operation"
  },
  {
    "name": "break",
    "remove": "break",
    "pattern": "(break\\;)",
    "type": "id_non_tilde"
  },
  {
    "name": "skip",
    "remove": "skip",
    "pattern": "(skip\\;)",
    "type": "id_non_tilde"
  },
  {
    "name": "typeof",
    "remove": "typeof",
    "pattern": "(typeof\\b(~?))",
    "type": "id"
  },
  {
    "name": "loop",
    "remove": "while",
    "pattern": "(while\\()",
    "type": "cond"
  },
  {
    "name": "ascii",
    "remove": "ascii",
    "pattern": "(ascii\\b(~?))",
    "type": "id"
  },
  {
    "name": "number",
    "remove": "number",
    "pattern": "(number\\-\\>)",
    "type": "type"
  },
  {
    "name": "number",
    "remove": "num",
    "pattern": "(num\\-\\>)",
    "type": "type"
  },
  {
    "name": "string",
    "remove": "string",
    "pattern": "(string\\-\\>)",
    "type": "type"
  },
  {
    "name": "boolean",
    "remove": "bool",
    "pattern": "(bool\\-\\>)",
    "type": "type"
  },
  {
    "name": "falsey",
    "remove": "falsey",
    "pattern": "(falsey\\-\\>)",
    "type": "type"
  },
  {
    "name": "hash",
    "remove": "hash",
    "pattern": "(hash\\-\\>)",
    "type": "type"
  },
  {
    "name": "array",
    "remove": "array",
    "pattern": "(array\\-\\>)",
    "type": "type"
  }
]
