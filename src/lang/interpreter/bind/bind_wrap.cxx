/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: .\bind.swigcxx

#define SWIGMODULE bind

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMoveFKIPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } SWIGSTRUCTPACKED a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}



  #include "cli.hpp"
  #include "../structs.hpp"
  #include "bind.hpp"



#include <string>


#include <vector>
#include <stdexcept>

SWIGINTERN std::vector< omm::Action >::const_reference std_vector_Sl_omm_Action_Sg__get(std::vector< omm::Action > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_omm_Action_Sg__set(std::vector< omm::Action > *self,int i,std::vector< omm::Action >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< long long >::const_reference std_vector_Sl_long_SS_long_Sg__get(std::vector< long long > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_long_SS_long_Sg__set(std::vector< long long > *self,int i,std::vector< long long >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_bind_a8cb6205d990f6b5(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;

  arg1 = *(void **)&_swig_go_0;

  Swig_free(arg1);

}


void *_wrap_Swig_malloc_bind_a8cb6205d990f6b5(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;

  arg1 = (int)_swig_go_0;

  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result;
  return _swig_go_result;
}


std::vector< omm::Action > *_wrap_new_ActionVec__SWIG_0_bind_a8cb6205d990f6b5() {
  std::vector< omm::Action > *result = 0 ;
  std::vector< omm::Action > *_swig_go_result;


  result = (std::vector< omm::Action > *)new std::vector< omm::Action >();
  *(std::vector< omm::Action > **)&_swig_go_result = (std::vector< omm::Action > *)result;
  return _swig_go_result;
}


std::vector< omm::Action > *_wrap_new_ActionVec__SWIG_1_bind_a8cb6205d990f6b5(long long _swig_go_0) {
  std::vector< omm::Action >::size_type arg1 ;
  std::vector< omm::Action > *result = 0 ;
  std::vector< omm::Action > *_swig_go_result;

  arg1 = (size_t)_swig_go_0;

  result = (std::vector< omm::Action > *)new std::vector< omm::Action >(arg1);
  *(std::vector< omm::Action > **)&_swig_go_result = (std::vector< omm::Action > *)result;
  return _swig_go_result;
}


std::vector< omm::Action > *_wrap_new_ActionVec__SWIG_2_bind_a8cb6205d990f6b5(std::vector< omm::Action > *_swig_go_0) {
  std::vector< omm::Action > *arg1 = 0 ;
  std::vector< omm::Action > *result = 0 ;
  std::vector< omm::Action > *_swig_go_result;

  arg1 = *(std::vector< omm::Action > **)&_swig_go_0;

  result = (std::vector< omm::Action > *)new std::vector< omm::Action >((std::vector< omm::Action > const &)*arg1);
  *(std::vector< omm::Action > **)&_swig_go_result = (std::vector< omm::Action > *)result;
  return _swig_go_result;
}


long long _wrap_ActionVec_size_bind_a8cb6205d990f6b5(std::vector< omm::Action > *_swig_go_0) {
  std::vector< omm::Action > *arg1 = (std::vector< omm::Action > *) 0 ;
  std::vector< omm::Action >::size_type result;
  long long _swig_go_result;

  arg1 = *(std::vector< omm::Action > **)&_swig_go_0;

  result = ((std::vector< omm::Action > const *)arg1)->size();
  _swig_go_result = result;
  return _swig_go_result;
}


long long _wrap_ActionVec_capacity_bind_a8cb6205d990f6b5(std::vector< omm::Action > *_swig_go_0) {
  std::vector< omm::Action > *arg1 = (std::vector< omm::Action > *) 0 ;
  std::vector< omm::Action >::size_type result;
  long long _swig_go_result;

  arg1 = *(std::vector< omm::Action > **)&_swig_go_0;

  result = ((std::vector< omm::Action > const *)arg1)->capacity();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ActionVec_reserve_bind_a8cb6205d990f6b5(std::vector< omm::Action > *_swig_go_0, long long _swig_go_1) {
  std::vector< omm::Action > *arg1 = (std::vector< omm::Action > *) 0 ;
  std::vector< omm::Action >::size_type arg2 ;

  arg1 = *(std::vector< omm::Action > **)&_swig_go_0;
  arg2 = (size_t)_swig_go_1;

  (arg1)->reserve(arg2);

}


bool _wrap_ActionVec_isEmpty_bind_a8cb6205d990f6b5(std::vector< omm::Action > *_swig_go_0) {
  std::vector< omm::Action > *arg1 = (std::vector< omm::Action > *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(std::vector< omm::Action > **)&_swig_go_0;

  result = (bool)((std::vector< omm::Action > const *)arg1)->empty();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ActionVec_clear_bind_a8cb6205d990f6b5(std::vector< omm::Action > *_swig_go_0) {
  std::vector< omm::Action > *arg1 = (std::vector< omm::Action > *) 0 ;

  arg1 = *(std::vector< omm::Action > **)&_swig_go_0;

  (arg1)->clear();

}


void _wrap_ActionVec_add_bind_a8cb6205d990f6b5(std::vector< omm::Action > *_swig_go_0, omm::Action *_swig_go_1) {
  std::vector< omm::Action > *arg1 = (std::vector< omm::Action > *) 0 ;
  std::vector< omm::Action >::value_type *arg2 = 0 ;

  arg1 = *(std::vector< omm::Action > **)&_swig_go_0;
  arg2 = *(std::vector< omm::Action >::value_type **)&_swig_go_1;

  (arg1)->push_back((std::vector< omm::Action >::value_type const &)*arg2);

}


omm::Action *_wrap_ActionVec_get_bind_a8cb6205d990f6b5(std::vector< omm::Action > *_swig_go_0, intgo _swig_go_1) {
  std::vector< omm::Action > *arg1 = (std::vector< omm::Action > *) 0 ;
  int arg2 ;
  std::vector< omm::Action >::value_type *result = 0 ;
  omm::Action *_swig_go_result;

  arg1 = *(std::vector< omm::Action > **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  try {
    result = (std::vector< omm::Action >::value_type *) &std_vector_Sl_omm_Action_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");

  }
  *(std::vector< omm::Action >::value_type **)&_swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ActionVec_set_bind_a8cb6205d990f6b5(std::vector< omm::Action > *_swig_go_0, intgo _swig_go_1, omm::Action *_swig_go_2) {
  std::vector< omm::Action > *arg1 = (std::vector< omm::Action > *) 0 ;
  int arg2 ;
  std::vector< omm::Action >::value_type *arg3 = 0 ;

  arg1 = *(std::vector< omm::Action > **)&_swig_go_0;
  arg2 = (int)_swig_go_1;
  arg3 = *(std::vector< omm::Action >::value_type **)&_swig_go_2;

  try {
    std_vector_Sl_omm_Action_Sg__set(arg1,arg2,(omm::Action const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");

  }

}


void _wrap_delete_ActionVec_bind_a8cb6205d990f6b5(std::vector< omm::Action > *_swig_go_0) {
  std::vector< omm::Action > *arg1 = (std::vector< omm::Action > *) 0 ;

  arg1 = *(std::vector< omm::Action > **)&_swig_go_0;

  delete arg1;

}


std::vector< std::string > *_wrap_new_StringVec__SWIG_0_bind_a8cb6205d990f6b5() {
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;


  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result;
  return _swig_go_result;
}


std::vector< std::string > *_wrap_new_StringVec__SWIG_1_bind_a8cb6205d990f6b5(long long _swig_go_0) {
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;

  arg1 = (size_t)_swig_go_0;

  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result;
  return _swig_go_result;
}


std::vector< std::string > *_wrap_new_StringVec__SWIG_2_bind_a8cb6205d990f6b5(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;

  arg1 = *(std::vector< std::string > **)&_swig_go_0;

  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result;
  return _swig_go_result;
}


long long _wrap_StringVec_size_bind_a8cb6205d990f6b5(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  long long _swig_go_result;

  arg1 = *(std::vector< std::string > **)&_swig_go_0;

  result = ((std::vector< std::string > const *)arg1)->size();
  _swig_go_result = result;
  return _swig_go_result;
}


long long _wrap_StringVec_capacity_bind_a8cb6205d990f6b5(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  long long _swig_go_result;

  arg1 = *(std::vector< std::string > **)&_swig_go_0;

  result = ((std::vector< std::string > const *)arg1)->capacity();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_StringVec_reserve_bind_a8cb6205d990f6b5(std::vector< std::string > *_swig_go_0, long long _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;

  arg1 = *(std::vector< std::string > **)&_swig_go_0;
  arg2 = (size_t)_swig_go_1;

  (arg1)->reserve(arg2);

}


bool _wrap_StringVec_isEmpty_bind_a8cb6205d990f6b5(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(std::vector< std::string > **)&_swig_go_0;

  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_StringVec_clear_bind_a8cb6205d990f6b5(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;

  arg1 = *(std::vector< std::string > **)&_swig_go_0;

  (arg1)->clear();

}


void _wrap_StringVec_add_bind_a8cb6205d990f6b5(std::vector< std::string > *_swig_go_0, _gostring_ _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;

  arg1 = *(std::vector< std::string > **)&_swig_go_0;

  std::vector< std::string >::value_type arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;


  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);

}


_gostring_ _wrap_StringVec_get_bind_a8cb6205d990f6b5(std::vector< std::string > *_swig_go_0, intgo _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(std::vector< std::string > **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");

  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length());
  return _swig_go_result;
}


void _wrap_StringVec_set_bind_a8cb6205d990f6b5(std::vector< std::string > *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;

  arg1 = *(std::vector< std::string > **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  std::vector< std::string >::value_type arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;


  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");

  }

}


void _wrap_delete_StringVec_bind_a8cb6205d990f6b5(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;

  arg1 = *(std::vector< std::string > **)&_swig_go_0;

  delete arg1;

}


std::vector< long long > *_wrap_new_LLVec__SWIG_0_bind_a8cb6205d990f6b5() {
  std::vector< long long > *result = 0 ;
  std::vector< long long > *_swig_go_result;


  result = (std::vector< long long > *)new std::vector< long long >();
  *(std::vector< long long > **)&_swig_go_result = (std::vector< long long > *)result;
  return _swig_go_result;
}


std::vector< long long > *_wrap_new_LLVec__SWIG_1_bind_a8cb6205d990f6b5(long long _swig_go_0) {
  std::vector< long long >::size_type arg1 ;
  std::vector< long long > *result = 0 ;
  std::vector< long long > *_swig_go_result;

  arg1 = (size_t)_swig_go_0;

  result = (std::vector< long long > *)new std::vector< long long >(arg1);
  *(std::vector< long long > **)&_swig_go_result = (std::vector< long long > *)result;
  return _swig_go_result;
}


std::vector< long long > *_wrap_new_LLVec__SWIG_2_bind_a8cb6205d990f6b5(std::vector< long long > *_swig_go_0) {
  std::vector< long long > *arg1 = 0 ;
  std::vector< long long > *result = 0 ;
  std::vector< long long > *_swig_go_result;

  arg1 = *(std::vector< long long > **)&_swig_go_0;

  result = (std::vector< long long > *)new std::vector< long long >((std::vector< long long > const &)*arg1);
  *(std::vector< long long > **)&_swig_go_result = (std::vector< long long > *)result;
  return _swig_go_result;
}


long long _wrap_LLVec_size_bind_a8cb6205d990f6b5(std::vector< long long > *_swig_go_0) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type result;
  long long _swig_go_result;

  arg1 = *(std::vector< long long > **)&_swig_go_0;

  result = ((std::vector< long long > const *)arg1)->size();
  _swig_go_result = result;
  return _swig_go_result;
}


long long _wrap_LLVec_capacity_bind_a8cb6205d990f6b5(std::vector< long long > *_swig_go_0) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type result;
  long long _swig_go_result;

  arg1 = *(std::vector< long long > **)&_swig_go_0;

  result = ((std::vector< long long > const *)arg1)->capacity();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_LLVec_reserve_bind_a8cb6205d990f6b5(std::vector< long long > *_swig_go_0, long long _swig_go_1) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type arg2 ;

  arg1 = *(std::vector< long long > **)&_swig_go_0;
  arg2 = (size_t)_swig_go_1;

  (arg1)->reserve(arg2);

}


bool _wrap_LLVec_isEmpty_bind_a8cb6205d990f6b5(std::vector< long long > *_swig_go_0) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(std::vector< long long > **)&_swig_go_0;

  result = (bool)((std::vector< long long > const *)arg1)->empty();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_LLVec_clear_bind_a8cb6205d990f6b5(std::vector< long long > *_swig_go_0) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;

  arg1 = *(std::vector< long long > **)&_swig_go_0;

  (arg1)->clear();

}


void _wrap_LLVec_add_bind_a8cb6205d990f6b5(std::vector< long long > *_swig_go_0, long long _swig_go_1) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::value_type *arg2 = 0 ;

  arg1 = *(std::vector< long long > **)&_swig_go_0;
  arg2 = (std::vector< long long >::value_type *)&_swig_go_1;

  (arg1)->push_back((std::vector< long long >::value_type const &)*arg2);

}


long long _wrap_LLVec_get_bind_a8cb6205d990f6b5(std::vector< long long > *_swig_go_0, intgo _swig_go_1) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  int arg2 ;
  std::vector< long long >::value_type *result = 0 ;
  long long _swig_go_result;

  arg1 = *(std::vector< long long > **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  try {
    result = (std::vector< long long >::value_type *) &std_vector_Sl_long_SS_long_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");

  }
  _swig_go_result = (long long)*result;
  return _swig_go_result;
}


void _wrap_LLVec_set_bind_a8cb6205d990f6b5(std::vector< long long > *_swig_go_0, intgo _swig_go_1, long long _swig_go_2) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  int arg2 ;
  std::vector< long long >::value_type *arg3 = 0 ;

  arg1 = *(std::vector< long long > **)&_swig_go_0;
  arg2 = (int)_swig_go_1;
  arg3 = (std::vector< long long >::value_type *)&_swig_go_2;

  try {
    std_vector_Sl_long_SS_long_Sg__set(arg1,arg2,(long long const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");

  }

}


void _wrap_delete_LLVec_bind_a8cb6205d990f6b5(std::vector< long long > *_swig_go_0) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;

  arg1 = *(std::vector< long long > **)&_swig_go_0;

  delete arg1;

}


void _wrap_Kill_bind_a8cb6205d990f6b5() {
  Kill();

}


BindClass *_wrap_new_BindClass_bind_a8cb6205d990f6b5() {
  BindClass *result = 0 ;
  BindClass *_swig_go_result;


  result = (BindClass *)new BindClass();
  *(BindClass **)&_swig_go_result = (BindClass *)result;
  return _swig_go_result;
}


void _wrap_BindClass_Run_bind_a8cb6205d990f6b5(BindClass *_swig_go_0, std::vector< omm::Action > *_swig_go_1, omm::CliParams *_swig_go_2, _gostring_ _swig_go_3, std::vector< std::string > *_swig_go_4) {
  BindClass *arg1 = (BindClass *) 0 ;
  std::vector< omm::Action > arg2 ;
  omm::CliParams arg3 ;
  std::string arg4 ;
  std::vector< std::string > arg5 ;
  std::vector< omm::Action > *argp2 ;
  omm::CliParams *argp3 ;
  std::vector< std::string > *argp5 ;

  arg1 = *(BindClass **)&_swig_go_0;

  argp2 = (std::vector< omm::Action > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::vector< omm::Action >");
  }
  arg2 = (std::vector< omm::Action >)*argp2;


  argp3 = (omm::CliParams *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null omm::CliParams");
  }
  arg3 = (omm::CliParams)*argp3;

  (&arg4)->assign(_swig_go_3.p, _swig_go_3.n);

  argp5 = (std::vector< std::string > *)_swig_go_4;
  if (argp5 == NULL) {
    _swig_gopanic("Attempt to dereference null std::vector< std::string >");
  }
  arg5 = (std::vector< std::string >)*argp5;


  (arg1)->Run(arg2,arg3,arg4,arg5);

}


void _wrap_delete_BindClass_bind_a8cb6205d990f6b5(BindClass *_swig_go_0) {
  BindClass *arg1 = (BindClass *) 0 ;

  arg1 = *(BindClass **)&_swig_go_0;

  delete arg1;

}


void _wrap_Condition_Type_set_bind_a8cb6205d990f6b5(omm::Condition *_swig_go_0, _gostring_ _swig_go_1) {
  omm::Condition *arg1 = (omm::Condition *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = *(omm::Condition **)&_swig_go_0;

  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;


  if (arg1) (arg1)->Type = *arg2;

}


_gostring_ _wrap_Condition_Type_get_bind_a8cb6205d990f6b5(omm::Condition *_swig_go_0) {
  omm::Condition *arg1 = (omm::Condition *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(omm::Condition **)&_swig_go_0;

  result = (std::string *) & ((arg1)->Type);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length());
  return _swig_go_result;
}


void _wrap_Condition_Condition_set_bind_a8cb6205d990f6b5(omm::Condition *_swig_go_0, std::vector< omm::Action > *_swig_go_1) {
  omm::Condition *arg1 = (omm::Condition *) 0 ;
  std::vector< omm::Action > *arg2 = (std::vector< omm::Action > *) 0 ;

  arg1 = *(omm::Condition **)&_swig_go_0;
  arg2 = *(std::vector< omm::Action > **)&_swig_go_1;

  if (arg1) (arg1)->Condition = *arg2;

}


std::vector< omm::Action > *_wrap_Condition_Condition_get_bind_a8cb6205d990f6b5(omm::Condition *_swig_go_0) {
  omm::Condition *arg1 = (omm::Condition *) 0 ;
  std::vector< omm::Action > *result = 0 ;
  std::vector< omm::Action > *_swig_go_result;

  arg1 = *(omm::Condition **)&_swig_go_0;

  result = (std::vector< omm::Action > *)& ((arg1)->Condition);
  *(std::vector< omm::Action > **)&_swig_go_result = (std::vector< omm::Action > *)result;
  return _swig_go_result;
}


void _wrap_Condition_Actions_set_bind_a8cb6205d990f6b5(omm::Condition *_swig_go_0, std::vector< omm::Action > *_swig_go_1) {
  omm::Condition *arg1 = (omm::Condition *) 0 ;
  std::vector< omm::Action > *arg2 = (std::vector< omm::Action > *) 0 ;

  arg1 = *(omm::Condition **)&_swig_go_0;
  arg2 = *(std::vector< omm::Action > **)&_swig_go_1;

  if (arg1) (arg1)->Actions = *arg2;

}


std::vector< omm::Action > *_wrap_Condition_Actions_get_bind_a8cb6205d990f6b5(omm::Condition *_swig_go_0) {
  omm::Condition *arg1 = (omm::Condition *) 0 ;
  std::vector< omm::Action > *result = 0 ;
  std::vector< omm::Action > *_swig_go_result;

  arg1 = *(omm::Condition **)&_swig_go_0;

  result = (std::vector< omm::Action > *)& ((arg1)->Actions);
  *(std::vector< omm::Action > **)&_swig_go_result = (std::vector< omm::Action > *)result;
  return _swig_go_result;
}


void _wrap_delete_Condition_bind_a8cb6205d990f6b5(omm::Condition *_swig_go_0) {
  omm::Condition *arg1 = (omm::Condition *) 0 ;

  arg1 = *(omm::Condition **)&_swig_go_0;

  delete arg1;

}


void _wrap_SubCaller_Indexes_set_bind_a8cb6205d990f6b5(omm::SubCaller *_swig_go_0, std::vector< std::vector< omm::Action > > *_swig_go_1) {
  omm::SubCaller *arg1 = (omm::SubCaller *) 0 ;
  std::vector< std::vector< omm::Action > > *arg2 = (std::vector< std::vector< omm::Action > > *) 0 ;

  arg1 = *(omm::SubCaller **)&_swig_go_0;
  arg2 = *(std::vector< std::vector< omm::Action > > **)&_swig_go_1;

  if (arg1) (arg1)->Indexes = *arg2;

}


std::vector< std::vector< omm::Action > > *_wrap_SubCaller_Indexes_get_bind_a8cb6205d990f6b5(omm::SubCaller *_swig_go_0) {
  omm::SubCaller *arg1 = (omm::SubCaller *) 0 ;
  std::vector< std::vector< omm::Action > > *result = 0 ;
  std::vector< std::vector< omm::Action > > *_swig_go_result;

  arg1 = *(omm::SubCaller **)&_swig_go_0;

  result = (std::vector< std::vector< omm::Action > > *)& ((arg1)->Indexes);
  *(std::vector< std::vector< omm::Action > > **)&_swig_go_result = (std::vector< std::vector< omm::Action > > *)result;
  return _swig_go_result;
}


void _wrap_SubCaller_Args_set_bind_a8cb6205d990f6b5(omm::SubCaller *_swig_go_0, std::vector< std::vector< omm::Action > > *_swig_go_1) {
  omm::SubCaller *arg1 = (omm::SubCaller *) 0 ;
  std::vector< std::vector< omm::Action > > *arg2 = (std::vector< std::vector< omm::Action > > *) 0 ;

  arg1 = *(omm::SubCaller **)&_swig_go_0;
  arg2 = *(std::vector< std::vector< omm::Action > > **)&_swig_go_1;

  if (arg1) (arg1)->Args = *arg2;

}


std::vector< std::vector< omm::Action > > *_wrap_SubCaller_Args_get_bind_a8cb6205d990f6b5(omm::SubCaller *_swig_go_0) {
  omm::SubCaller *arg1 = (omm::SubCaller *) 0 ;
  std::vector< std::vector< omm::Action > > *result = 0 ;
  std::vector< std::vector< omm::Action > > *_swig_go_result;

  arg1 = *(omm::SubCaller **)&_swig_go_0;

  result = (std::vector< std::vector< omm::Action > > *)& ((arg1)->Args);
  *(std::vector< std::vector< omm::Action > > **)&_swig_go_result = (std::vector< std::vector< omm::Action > > *)result;
  return _swig_go_result;
}


void _wrap_SubCaller_IsProc_set_bind_a8cb6205d990f6b5(omm::SubCaller *_swig_go_0, bool _swig_go_1) {
  omm::SubCaller *arg1 = (omm::SubCaller *) 0 ;
  bool arg2 ;

  arg1 = *(omm::SubCaller **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->IsProc = arg2;

}


bool _wrap_SubCaller_IsProc_get_bind_a8cb6205d990f6b5(omm::SubCaller *_swig_go_0) {
  omm::SubCaller *arg1 = (omm::SubCaller *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(omm::SubCaller **)&_swig_go_0;

  result = (bool) ((arg1)->IsProc);
  _swig_go_result = result;
  return _swig_go_result;
}


omm::SubCaller *_wrap_new_SubCaller_bind_a8cb6205d990f6b5() {
  omm::SubCaller *result = 0 ;
  omm::SubCaller *_swig_go_result;


  result = (omm::SubCaller *)new omm::SubCaller();
  *(omm::SubCaller **)&_swig_go_result = (omm::SubCaller *)result;
  return _swig_go_result;
}


void _wrap_delete_SubCaller_bind_a8cb6205d990f6b5(omm::SubCaller *_swig_go_0) {
  omm::SubCaller *arg1 = (omm::SubCaller *) 0 ;

  arg1 = *(omm::SubCaller **)&_swig_go_0;

  delete arg1;

}


void _wrap_Action_Type_set_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0, _gostring_ _swig_go_1) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = *(omm::Action **)&_swig_go_0;

  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;


  if (arg1) (arg1)->Type = *arg2;

}


_gostring_ _wrap_Action_Type_get_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(omm::Action **)&_swig_go_0;

  result = (std::string *) & ((arg1)->Type);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length());
  return _swig_go_result;
}


void _wrap_Action_Name_set_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0, _gostring_ _swig_go_1) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = *(omm::Action **)&_swig_go_0;

  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;


  if (arg1) (arg1)->Name = *arg2;

}


_gostring_ _wrap_Action_Name_get_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(omm::Action **)&_swig_go_0;

  result = (std::string *) & ((arg1)->Name);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length());
  return _swig_go_result;
}


void _wrap_Action_ExpStr_set_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0, std::vector< std::string > *_swig_go_1) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;

  arg1 = *(omm::Action **)&_swig_go_0;
  arg2 = *(std::vector< std::string > **)&_swig_go_1;

  if (arg1) (arg1)->ExpStr = *arg2;

}


std::vector< std::string > *_wrap_Action_ExpStr_get_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;

  arg1 = *(omm::Action **)&_swig_go_0;

  result = (std::vector< std::string > *)& ((arg1)->ExpStr);
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result;
  return _swig_go_result;
}


void _wrap_Action_ExpAct_set_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0, std::vector< omm::Action > *_swig_go_1) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::vector< omm::Action > *arg2 = (std::vector< omm::Action > *) 0 ;

  arg1 = *(omm::Action **)&_swig_go_0;
  arg2 = *(std::vector< omm::Action > **)&_swig_go_1;

  if (arg1) (arg1)->ExpAct = *arg2;

}


std::vector< omm::Action > *_wrap_Action_ExpAct_get_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::vector< omm::Action > *result = 0 ;
  std::vector< omm::Action > *_swig_go_result;

  arg1 = *(omm::Action **)&_swig_go_0;

  result = (std::vector< omm::Action > *)& ((arg1)->ExpAct);
  *(std::vector< omm::Action > **)&_swig_go_result = (std::vector< omm::Action > *)result;
  return _swig_go_result;
}


void _wrap_Action_Params_set_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0, std::vector< std::string > *_swig_go_1) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;

  arg1 = *(omm::Action **)&_swig_go_0;
  arg2 = *(std::vector< std::string > **)&_swig_go_1;

  if (arg1) (arg1)->Params = *arg2;

}


std::vector< std::string > *_wrap_Action_Params_get_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;

  arg1 = *(omm::Action **)&_swig_go_0;

  result = (std::vector< std::string > *)& ((arg1)->Params);
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result;
  return _swig_go_result;
}


void _wrap_Action_Args_set_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0, std::vector< std::vector< omm::Action > > *_swig_go_1) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::vector< std::vector< omm::Action > > *arg2 = (std::vector< std::vector< omm::Action > > *) 0 ;

  arg1 = *(omm::Action **)&_swig_go_0;
  arg2 = *(std::vector< std::vector< omm::Action > > **)&_swig_go_1;

  if (arg1) (arg1)->Args = *arg2;

}


std::vector< std::vector< omm::Action > > *_wrap_Action_Args_get_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::vector< std::vector< omm::Action > > *result = 0 ;
  std::vector< std::vector< omm::Action > > *_swig_go_result;

  arg1 = *(omm::Action **)&_swig_go_0;

  result = (std::vector< std::vector< omm::Action > > *)& ((arg1)->Args);
  *(std::vector< std::vector< omm::Action > > **)&_swig_go_result = (std::vector< std::vector< omm::Action > > *)result;
  return _swig_go_result;
}


void _wrap_Action_Condition_set_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0, std::vector< omm::Condition > *_swig_go_1) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::vector< omm::Condition > *arg2 = (std::vector< omm::Condition > *) 0 ;

  arg1 = *(omm::Action **)&_swig_go_0;
  arg2 = *(std::vector< omm::Condition > **)&_swig_go_1;

  if (arg1) (arg1)->Condition = *arg2;

}


std::vector< omm::Condition > *_wrap_Action_Condition_get_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::vector< omm::Condition > *result = 0 ;
  std::vector< omm::Condition > *_swig_go_result;

  arg1 = *(omm::Action **)&_swig_go_0;

  result = (std::vector< omm::Condition > *)& ((arg1)->Condition);
  *(std::vector< omm::Condition > **)&_swig_go_result = (std::vector< omm::Condition > *)result;
  return _swig_go_result;
}


void _wrap_Action_ID_set_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0, intgo _swig_go_1) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  int arg2 ;

  arg1 = *(omm::Action **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->ID = arg2;

}


intgo _wrap_Action_ID_get_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(omm::Action **)&_swig_go_0;

  result = (int) ((arg1)->ID);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Action_First_set_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0, std::vector< omm::Action > *_swig_go_1) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::vector< omm::Action > *arg2 = (std::vector< omm::Action > *) 0 ;

  arg1 = *(omm::Action **)&_swig_go_0;
  arg2 = *(std::vector< omm::Action > **)&_swig_go_1;

  if (arg1) (arg1)->First = *arg2;

}


std::vector< omm::Action > *_wrap_Action_First_get_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::vector< omm::Action > *result = 0 ;
  std::vector< omm::Action > *_swig_go_result;

  arg1 = *(omm::Action **)&_swig_go_0;

  result = (std::vector< omm::Action > *)& ((arg1)->First);
  *(std::vector< omm::Action > **)&_swig_go_result = (std::vector< omm::Action > *)result;
  return _swig_go_result;
}


void _wrap_Action_Second_set_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0, std::vector< omm::Action > *_swig_go_1) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::vector< omm::Action > *arg2 = (std::vector< omm::Action > *) 0 ;

  arg1 = *(omm::Action **)&_swig_go_0;
  arg2 = *(std::vector< omm::Action > **)&_swig_go_1;

  if (arg1) (arg1)->Second = *arg2;

}


std::vector< omm::Action > *_wrap_Action_Second_get_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::vector< omm::Action > *result = 0 ;
  std::vector< omm::Action > *_swig_go_result;

  arg1 = *(omm::Action **)&_swig_go_0;

  result = (std::vector< omm::Action > *)& ((arg1)->Second);
  *(std::vector< omm::Action > **)&_swig_go_result = (std::vector< omm::Action > *)result;
  return _swig_go_result;
}


void _wrap_Action_Degree_set_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0, std::vector< omm::Action > *_swig_go_1) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::vector< omm::Action > *arg2 = (std::vector< omm::Action > *) 0 ;

  arg1 = *(omm::Action **)&_swig_go_0;
  arg2 = *(std::vector< omm::Action > **)&_swig_go_1;

  if (arg1) (arg1)->Degree = *arg2;

}


std::vector< omm::Action > *_wrap_Action_Degree_get_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::vector< omm::Action > *result = 0 ;
  std::vector< omm::Action > *_swig_go_result;

  arg1 = *(omm::Action **)&_swig_go_0;

  result = (std::vector< omm::Action > *)& ((arg1)->Degree);
  *(std::vector< omm::Action > **)&_swig_go_result = (std::vector< omm::Action > *)result;
  return _swig_go_result;
}


void _wrap_Action_Value_set_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0, std::vector< std::vector< omm::Action > > *_swig_go_1) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::vector< std::vector< omm::Action > > *arg2 = (std::vector< std::vector< omm::Action > > *) 0 ;

  arg1 = *(omm::Action **)&_swig_go_0;
  arg2 = *(std::vector< std::vector< omm::Action > > **)&_swig_go_1;

  if (arg1) (arg1)->Value = *arg2;

}


std::vector< std::vector< omm::Action > > *_wrap_Action_Value_get_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::vector< std::vector< omm::Action > > *result = 0 ;
  std::vector< std::vector< omm::Action > > *_swig_go_result;

  arg1 = *(omm::Action **)&_swig_go_0;

  result = (std::vector< std::vector< omm::Action > > *)& ((arg1)->Value);
  *(std::vector< std::vector< omm::Action > > **)&_swig_go_result = (std::vector< std::vector< omm::Action > > *)result;
  return _swig_go_result;
}


void _wrap_Action_Indexes_set_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0, std::vector< std::vector< omm::Action > > *_swig_go_1) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::vector< std::vector< omm::Action > > *arg2 = (std::vector< std::vector< omm::Action > > *) 0 ;

  arg1 = *(omm::Action **)&_swig_go_0;
  arg2 = *(std::vector< std::vector< omm::Action > > **)&_swig_go_1;

  if (arg1) (arg1)->Indexes = *arg2;

}


std::vector< std::vector< omm::Action > > *_wrap_Action_Indexes_get_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::vector< std::vector< omm::Action > > *result = 0 ;
  std::vector< std::vector< omm::Action > > *_swig_go_result;

  arg1 = *(omm::Action **)&_swig_go_0;

  result = (std::vector< std::vector< omm::Action > > *)& ((arg1)->Indexes);
  *(std::vector< std::vector< omm::Action > > **)&_swig_go_result = (std::vector< std::vector< omm::Action > > *)result;
  return _swig_go_result;
}


void _wrap_Action_Hash_Values_set_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0, std::map< std::string,std::vector< omm::Action > > *_swig_go_1) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::map< std::string,std::vector< omm::Action > > *arg2 = (std::map< std::string,std::vector< omm::Action > > *) 0 ;

  arg1 = *(omm::Action **)&_swig_go_0;
  arg2 = *(std::map< std::string,std::vector< omm::Action > > **)&_swig_go_1;

  if (arg1) (arg1)->Hash_Values = *arg2;

}


std::map< std::string,std::vector< omm::Action > > *_wrap_Action_Hash_Values_get_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::map< std::string,std::vector< omm::Action > > *result = 0 ;
  std::map< std::string,std::vector< omm::Action > > *_swig_go_result;

  arg1 = *(omm::Action **)&_swig_go_0;

  result = (std::map< std::string,std::vector< omm::Action > > *)& ((arg1)->Hash_Values);
  *(std::map< std::string,std::vector< omm::Action > > **)&_swig_go_result = (std::map< std::string,std::vector< omm::Action > > *)result;
  return _swig_go_result;
}


void _wrap_Action_IsMutable_set_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0, bool _swig_go_1) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  bool arg2 ;

  arg1 = *(omm::Action **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->IsMutable = arg2;

}


bool _wrap_Action_IsMutable_get_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(omm::Action **)&_swig_go_0;

  result = (bool) ((arg1)->IsMutable);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Action_Access_set_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0, _gostring_ _swig_go_1) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = *(omm::Action **)&_swig_go_0;

  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;


  if (arg1) (arg1)->Access = *arg2;

}


_gostring_ _wrap_Action_Access_get_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(omm::Action **)&_swig_go_0;

  result = (std::string *) & ((arg1)->Access);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length());
  return _swig_go_result;
}


void _wrap_Action_SubCall_set_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0, std::vector< omm::SubCaller > *_swig_go_1) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::vector< omm::SubCaller > *arg2 = (std::vector< omm::SubCaller > *) 0 ;

  arg1 = *(omm::Action **)&_swig_go_0;
  arg2 = *(std::vector< omm::SubCaller > **)&_swig_go_1;

  if (arg1) (arg1)->SubCall = *arg2;

}


std::vector< omm::SubCaller > *_wrap_Action_SubCall_get_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::vector< omm::SubCaller > *result = 0 ;
  std::vector< omm::SubCaller > *_swig_go_result;

  arg1 = *(omm::Action **)&_swig_go_0;

  result = (std::vector< omm::SubCaller > *)& ((arg1)->SubCall);
  *(std::vector< omm::SubCaller > **)&_swig_go_result = (std::vector< omm::SubCaller > *)result;
  return _swig_go_result;
}


void _wrap_Action_Integer_set_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0, std::vector< long long > *_swig_go_1) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::vector< long long > *arg2 = (std::vector< long long > *) 0 ;

  arg1 = *(omm::Action **)&_swig_go_0;
  arg2 = *(std::vector< long long > **)&_swig_go_1;

  if (arg1) (arg1)->Integer = *arg2;

}


std::vector< long long > *_wrap_Action_Integer_get_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::vector< long long > *result = 0 ;
  std::vector< long long > *_swig_go_result;

  arg1 = *(omm::Action **)&_swig_go_0;

  result = (std::vector< long long > *)& ((arg1)->Integer);
  *(std::vector< long long > **)&_swig_go_result = (std::vector< long long > *)result;
  return _swig_go_result;
}


void _wrap_Action_Decimal_set_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0, std::vector< long long > *_swig_go_1) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::vector< long long > *arg2 = (std::vector< long long > *) 0 ;

  arg1 = *(omm::Action **)&_swig_go_0;
  arg2 = *(std::vector< long long > **)&_swig_go_1;

  if (arg1) (arg1)->Decimal = *arg2;

}


std::vector< long long > *_wrap_Action_Decimal_get_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::vector< long long > *result = 0 ;
  std::vector< long long > *_swig_go_result;

  arg1 = *(omm::Action **)&_swig_go_0;

  result = (std::vector< long long > *)& ((arg1)->Decimal);
  *(std::vector< long long > **)&_swig_go_result = (std::vector< long long > *)result;
  return _swig_go_result;
}


void _wrap_Action_Thread_set_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0, std::shared_ptr< std::future< omm::Returner > > *_swig_go_1) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::shared_ptr< std::future< omm::Returner > > *arg2 = (std::shared_ptr< std::future< omm::Returner > > *) 0 ;

  arg1 = *(omm::Action **)&_swig_go_0;
  arg2 = *(std::shared_ptr< std::future< omm::Returner > > **)&_swig_go_1;

  if (arg1) (arg1)->Thread = *arg2;

}


std::shared_ptr< std::future< omm::Returner > > *_wrap_Action_Thread_get_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0) {
  omm::Action *arg1 = (omm::Action *) 0 ;
  std::shared_ptr< std::future< omm::Returner > > *result = 0 ;
  std::shared_ptr< std::future< omm::Returner > > *_swig_go_result;

  arg1 = *(omm::Action **)&_swig_go_0;

  result = (std::shared_ptr< std::future< omm::Returner > > *)& ((arg1)->Thread);
  *(std::shared_ptr< std::future< omm::Returner > > **)&_swig_go_result = (std::shared_ptr< std::future< omm::Returner > > *)result;
  return _swig_go_result;
}


omm::Action *_wrap_new_Action_bind_a8cb6205d990f6b5() {
  omm::Action *result = 0 ;
  omm::Action *_swig_go_result;


  result = (omm::Action *)new omm::Action();
  *(omm::Action **)&_swig_go_result = (omm::Action *)result;
  return _swig_go_result;
}


void _wrap_delete_Action_bind_a8cb6205d990f6b5(omm::Action *_swig_go_0) {
  omm::Action *arg1 = (omm::Action *) 0 ;

  arg1 = *(omm::Action **)&_swig_go_0;

  delete arg1;

}


void _wrap_Variable_Xtype_set_bind_a8cb6205d990f6b5(omm::Variable *_swig_go_0, _gostring_ _swig_go_1) {
  omm::Variable *arg1 = (omm::Variable *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = *(omm::Variable **)&_swig_go_0;

  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;


  if (arg1) (arg1)->type = *arg2;

}


_gostring_ _wrap_Variable_Xtype_get_bind_a8cb6205d990f6b5(omm::Variable *_swig_go_0) {
  omm::Variable *arg1 = (omm::Variable *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(omm::Variable **)&_swig_go_0;

  result = (std::string *) & ((arg1)->type);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length());
  return _swig_go_result;
}


void _wrap_Variable_name_set_bind_a8cb6205d990f6b5(omm::Variable *_swig_go_0, _gostring_ _swig_go_1) {
  omm::Variable *arg1 = (omm::Variable *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = *(omm::Variable **)&_swig_go_0;

  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;


  if (arg1) (arg1)->name = *arg2;

}


_gostring_ _wrap_Variable_name_get_bind_a8cb6205d990f6b5(omm::Variable *_swig_go_0) {
  omm::Variable *arg1 = (omm::Variable *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(omm::Variable **)&_swig_go_0;

  result = (std::string *) & ((arg1)->name);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length());
  return _swig_go_result;
}


void _wrap_Variable_value_set_bind_a8cb6205d990f6b5(omm::Variable *_swig_go_0, std::vector< omm::Action > *_swig_go_1) {
  omm::Variable *arg1 = (omm::Variable *) 0 ;
  std::vector< omm::Action > *arg2 = (std::vector< omm::Action > *) 0 ;

  arg1 = *(omm::Variable **)&_swig_go_0;
  arg2 = *(std::vector< omm::Action > **)&_swig_go_1;

  if (arg1) (arg1)->value = *arg2;

}


std::vector< omm::Action > *_wrap_Variable_value_get_bind_a8cb6205d990f6b5(omm::Variable *_swig_go_0) {
  omm::Variable *arg1 = (omm::Variable *) 0 ;
  std::vector< omm::Action > *result = 0 ;
  std::vector< omm::Action > *_swig_go_result;

  arg1 = *(omm::Variable **)&_swig_go_0;

  result = (std::vector< omm::Action > *)& ((arg1)->value);
  *(std::vector< omm::Action > **)&_swig_go_result = (std::vector< omm::Action > *)result;
  return _swig_go_result;
}


void _wrap_Variable_cproc_set_bind_a8cb6205d990f6b5(omm::Variable *_swig_go_0, std::function< omm::Returner (omm::Action,omm::CliParams,std::map< std::string,omm::Variable >,std::deque< std::map< std::string,std::vector< omm::Action > > >,std::string) > *_swig_go_1) {
  omm::Variable *arg1 = (omm::Variable *) 0 ;
  std::function< omm::Returner (omm::Action,omm::CliParams,std::map< std::string,omm::Variable >,std::deque< std::map< std::string,std::vector< omm::Action > > >,std::string) > *arg2 = (std::function< omm::Returner (omm::Action,omm::CliParams,std::map< std::string,omm::Variable >,std::deque< std::map< std::string,std::vector< omm::Action > > >,std::string) > *) 0 ;

  arg1 = *(omm::Variable **)&_swig_go_0;
  arg2 = *(std::function< omm::Returner (omm::Action,omm::CliParams,std::map< std::string,omm::Variable >,std::deque< std::map< std::string,std::vector< omm::Action > > >,std::string) > **)&_swig_go_1;

  if (arg1) (arg1)->cproc = *arg2;

}


std::function< omm::Returner (omm::Action,omm::CliParams,std::map< std::string,omm::Variable >,std::deque< std::map< std::string,std::vector< omm::Action > > >,std::string) > *_wrap_Variable_cproc_get_bind_a8cb6205d990f6b5(omm::Variable *_swig_go_0) {
  omm::Variable *arg1 = (omm::Variable *) 0 ;
  std::function< omm::Returner (omm::Action,omm::CliParams,std::map< std::string,omm::Variable >,std::deque< std::map< std::string,std::vector< omm::Action > > >,std::string) > *result = 0 ;
  std::function< omm::Returner (omm::Action,omm::CliParams,std::map< std::string,omm::Variable >,std::deque< std::map< std::string,std::vector< omm::Action > > >,std::string) > *_swig_go_result;

  arg1 = *(omm::Variable **)&_swig_go_0;

  result = (std::function< omm::Returner (omm::Action,omm::CliParams,std::map< std::string,omm::Variable >,std::deque< std::map< std::string,std::vector< omm::Action > > >,std::string) > *)& ((arg1)->cproc);
  *(std::function< omm::Returner (omm::Action,omm::CliParams,std::map< std::string,omm::Variable >,std::deque< std::map< std::string,std::vector< omm::Action > > >,std::string) > **)&_swig_go_result = (std::function< omm::Returner (omm::Action,omm::CliParams,std::map< std::string,omm::Variable >,std::deque< std::map< std::string,std::vector< omm::Action > > >,std::string) > *)result;
  return _swig_go_result;
}


omm::Variable *_wrap_new_Variable_bind_a8cb6205d990f6b5() {
  omm::Variable *result = 0 ;
  omm::Variable *_swig_go_result;


  result = (omm::Variable *)new omm::Variable();
  *(omm::Variable **)&_swig_go_result = (omm::Variable *)result;
  return _swig_go_result;
}


void _wrap_delete_Variable_bind_a8cb6205d990f6b5(omm::Variable *_swig_go_0) {
  omm::Variable *arg1 = (omm::Variable *) 0 ;

  arg1 = *(omm::Variable **)&_swig_go_0;

  delete arg1;

}


void _wrap_Returner_value_set_bind_a8cb6205d990f6b5(omm::Returner *_swig_go_0, std::vector< std::string > *_swig_go_1) {
  omm::Returner *arg1 = (omm::Returner *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;

  arg1 = *(omm::Returner **)&_swig_go_0;
  arg2 = *(std::vector< std::string > **)&_swig_go_1;

  if (arg1) (arg1)->value = *arg2;

}


std::vector< std::string > *_wrap_Returner_value_get_bind_a8cb6205d990f6b5(omm::Returner *_swig_go_0) {
  omm::Returner *arg1 = (omm::Returner *) 0 ;
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;

  arg1 = *(omm::Returner **)&_swig_go_0;

  result = (std::vector< std::string > *)& ((arg1)->value);
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result;
  return _swig_go_result;
}


void _wrap_Returner_variables_set_bind_a8cb6205d990f6b5(omm::Returner *_swig_go_0, std::map< std::string,omm::Variable > *_swig_go_1) {
  omm::Returner *arg1 = (omm::Returner *) 0 ;
  std::map< std::string,omm::Variable > *arg2 = (std::map< std::string,omm::Variable > *) 0 ;

  arg1 = *(omm::Returner **)&_swig_go_0;
  arg2 = *(std::map< std::string,omm::Variable > **)&_swig_go_1;

  if (arg1) (arg1)->variables = *arg2;

}


std::map< std::string,omm::Variable > *_wrap_Returner_variables_get_bind_a8cb6205d990f6b5(omm::Returner *_swig_go_0) {
  omm::Returner *arg1 = (omm::Returner *) 0 ;
  std::map< std::string,omm::Variable > *result = 0 ;
  std::map< std::string,omm::Variable > *_swig_go_result;

  arg1 = *(omm::Returner **)&_swig_go_0;

  result = (std::map< std::string,omm::Variable > *)& ((arg1)->variables);
  *(std::map< std::string,omm::Variable > **)&_swig_go_result = (std::map< std::string,omm::Variable > *)result;
  return _swig_go_result;
}


void _wrap_Returner_exp_set_bind_a8cb6205d990f6b5(omm::Returner *_swig_go_0, omm::Action *_swig_go_1) {
  omm::Returner *arg1 = (omm::Returner *) 0 ;
  omm::Action *arg2 = (omm::Action *) 0 ;

  arg1 = *(omm::Returner **)&_swig_go_0;
  arg2 = *(omm::Action **)&_swig_go_1;

  if (arg1) (arg1)->exp = *arg2;

}


omm::Action *_wrap_Returner_exp_get_bind_a8cb6205d990f6b5(omm::Returner *_swig_go_0) {
  omm::Returner *arg1 = (omm::Returner *) 0 ;
  omm::Action *result = 0 ;
  omm::Action *_swig_go_result;

  arg1 = *(omm::Returner **)&_swig_go_0;

  result = (omm::Action *)& ((arg1)->exp);
  *(omm::Action **)&_swig_go_result = (omm::Action *)result;
  return _swig_go_result;
}


void _wrap_Returner_Xtype_set_bind_a8cb6205d990f6b5(omm::Returner *_swig_go_0, _gostring_ _swig_go_1) {
  omm::Returner *arg1 = (omm::Returner *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = *(omm::Returner **)&_swig_go_0;

  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;


  if (arg1) (arg1)->type = *arg2;

}


_gostring_ _wrap_Returner_Xtype_get_bind_a8cb6205d990f6b5(omm::Returner *_swig_go_0) {
  omm::Returner *arg1 = (omm::Returner *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(omm::Returner **)&_swig_go_0;

  result = (std::string *) & ((arg1)->type);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length());
  return _swig_go_result;
}


omm::Returner *_wrap_new_Returner_bind_a8cb6205d990f6b5() {
  omm::Returner *result = 0 ;
  omm::Returner *_swig_go_result;


  result = (omm::Returner *)new omm::Returner();
  *(omm::Returner **)&_swig_go_result = (omm::Returner *)result;
  return _swig_go_result;
}


void _wrap_delete_Returner_bind_a8cb6205d990f6b5(omm::Returner *_swig_go_0) {
  omm::Returner *arg1 = (omm::Returner *) 0 ;

  arg1 = *(omm::Returner **)&_swig_go_0;

  delete arg1;

}


void _wrap_Calc_PREC_set_bind_a8cb6205d990f6b5(omm::Calc *_swig_go_0, intgo _swig_go_1) {
  omm::Calc *arg1 = (omm::Calc *) 0 ;
  int arg2 ;

  arg1 = *(omm::Calc **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->PREC = arg2;

}


intgo _wrap_Calc_PREC_get_bind_a8cb6205d990f6b5(omm::Calc *_swig_go_0) {
  omm::Calc *arg1 = (omm::Calc *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(omm::Calc **)&_swig_go_0;

  result = (int) ((arg1)->PREC);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Calc_O_set_bind_a8cb6205d990f6b5(omm::Calc *_swig_go_0, _gostring_ _swig_go_1) {
  omm::Calc *arg1 = (omm::Calc *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = *(omm::Calc **)&_swig_go_0;

  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;


  if (arg1) (arg1)->O = *arg2;

}


_gostring_ _wrap_Calc_O_get_bind_a8cb6205d990f6b5(omm::Calc *_swig_go_0) {
  omm::Calc *arg1 = (omm::Calc *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(omm::Calc **)&_swig_go_0;

  result = (std::string *) & ((arg1)->O);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length());
  return _swig_go_result;
}


omm::Calc *_wrap_new_Calc_bind_a8cb6205d990f6b5() {
  omm::Calc *result = 0 ;
  omm::Calc *_swig_go_result;


  result = (omm::Calc *)new omm::Calc();
  *(omm::Calc **)&_swig_go_result = (omm::Calc *)result;
  return _swig_go_result;
}


void _wrap_delete_Calc_bind_a8cb6205d990f6b5(omm::Calc *_swig_go_0) {
  omm::Calc *arg1 = (omm::Calc *) 0 ;

  arg1 = *(omm::Calc **)&_swig_go_0;

  delete arg1;

}


void _wrap_Package_ADDON_set_bind_a8cb6205d990f6b5(omm::Packages *_swig_go_0, _gostring_ _swig_go_1) {
  omm::Packages *arg1 = (omm::Packages *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = *(omm::Packages **)&_swig_go_0;

  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;


  if (arg1) (arg1)->ADDON = *arg2;

}


_gostring_ _wrap_Package_ADDON_get_bind_a8cb6205d990f6b5(omm::Packages *_swig_go_0) {
  omm::Packages *arg1 = (omm::Packages *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(omm::Packages **)&_swig_go_0;

  result = (std::string *) & ((arg1)->ADDON);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length());
  return _swig_go_result;
}


omm::Packages *_wrap_new_Package_bind_a8cb6205d990f6b5() {
  omm::Packages *result = 0 ;
  omm::Packages *_swig_go_result;


  result = (omm::Packages *)new omm::Packages();
  *(omm::Packages **)&_swig_go_result = (omm::Packages *)result;
  return _swig_go_result;
}


void _wrap_delete_Package_bind_a8cb6205d990f6b5(omm::Packages *_swig_go_0) {
  omm::Packages *arg1 = (omm::Packages *) 0 ;

  arg1 = *(omm::Packages **)&_swig_go_0;

  delete arg1;

}


void _wrap_Files_NAME_set_bind_a8cb6205d990f6b5(omm::Files *_swig_go_0, _gostring_ _swig_go_1) {
  omm::Files *arg1 = (omm::Files *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = *(omm::Files **)&_swig_go_0;

  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;


  if (arg1) (arg1)->NAME = *arg2;

}


_gostring_ _wrap_Files_NAME_get_bind_a8cb6205d990f6b5(omm::Files *_swig_go_0) {
  omm::Files *arg1 = (omm::Files *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(omm::Files **)&_swig_go_0;

  result = (std::string *) & ((arg1)->NAME);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length());
  return _swig_go_result;
}


void _wrap_Files_DIR_set_bind_a8cb6205d990f6b5(omm::Files *_swig_go_0, _gostring_ _swig_go_1) {
  omm::Files *arg1 = (omm::Files *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = *(omm::Files **)&_swig_go_0;

  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;


  if (arg1) (arg1)->DIR = *arg2;

}


_gostring_ _wrap_Files_DIR_get_bind_a8cb6205d990f6b5(omm::Files *_swig_go_0) {
  omm::Files *arg1 = (omm::Files *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(omm::Files **)&_swig_go_0;

  result = (std::string *) & ((arg1)->DIR);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length());
  return _swig_go_result;
}


omm::Files *_wrap_new_Files_bind_a8cb6205d990f6b5() {
  omm::Files *result = 0 ;
  omm::Files *_swig_go_result;


  result = (omm::Files *)new omm::Files();
  *(omm::Files **)&_swig_go_result = (omm::Files *)result;
  return _swig_go_result;
}


void _wrap_delete_Files_bind_a8cb6205d990f6b5(omm::Files *_swig_go_0) {
  omm::Files *arg1 = (omm::Files *) 0 ;

  arg1 = *(omm::Files **)&_swig_go_0;

  delete arg1;

}


void _wrap_CliParams_Calc_set_bind_a8cb6205d990f6b5(omm::CliParams *_swig_go_0, omm::Calc *_swig_go_1) {
  omm::CliParams *arg1 = (omm::CliParams *) 0 ;
  omm::Calc *arg2 = (omm::Calc *) 0 ;

  arg1 = *(omm::CliParams **)&_swig_go_0;
  arg2 = *(omm::Calc **)&_swig_go_1;

  if (arg1) (arg1)->Calc = *arg2;

}


omm::Calc *_wrap_CliParams_Calc_get_bind_a8cb6205d990f6b5(omm::CliParams *_swig_go_0) {
  omm::CliParams *arg1 = (omm::CliParams *) 0 ;
  omm::Calc *result = 0 ;
  omm::Calc *_swig_go_result;

  arg1 = *(omm::CliParams **)&_swig_go_0;

  result = (omm::Calc *)& ((arg1)->Calc);
  *(omm::Calc **)&_swig_go_result = (omm::Calc *)result;
  return _swig_go_result;
}


void _wrap_CliParams_Package_set_bind_a8cb6205d990f6b5(omm::CliParams *_swig_go_0, omm::Packages *_swig_go_1) {
  omm::CliParams *arg1 = (omm::CliParams *) 0 ;
  omm::Package *arg2 = (omm::Package *) 0 ;

  arg1 = *(omm::CliParams **)&_swig_go_0;
  arg2 = *(omm::Package **)&_swig_go_1;

  if (arg1) (arg1)->Package = *arg2;

}


omm::Packages *_wrap_CliParams_Package_get_bind_a8cb6205d990f6b5(omm::CliParams *_swig_go_0) {
  omm::CliParams *arg1 = (omm::CliParams *) 0 ;
  omm::Package *result = 0 ;
  omm::Packages *_swig_go_result;

  arg1 = *(omm::CliParams **)&_swig_go_0;

  result = (omm::Package *)& ((arg1)->Package);
  *(omm::Package **)&_swig_go_result = (omm::Package *)result;
  return _swig_go_result;
}


void _wrap_CliParams_Files_set_bind_a8cb6205d990f6b5(omm::CliParams *_swig_go_0, omm::Files *_swig_go_1) {
  omm::CliParams *arg1 = (omm::CliParams *) 0 ;
  omm::Files *arg2 = (omm::Files *) 0 ;

  arg1 = *(omm::CliParams **)&_swig_go_0;
  arg2 = *(omm::Files **)&_swig_go_1;

  if (arg1) (arg1)->Files = *arg2;

}


omm::Files *_wrap_CliParams_Files_get_bind_a8cb6205d990f6b5(omm::CliParams *_swig_go_0) {
  omm::CliParams *arg1 = (omm::CliParams *) 0 ;
  omm::Files *result = 0 ;
  omm::Files *_swig_go_result;

  arg1 = *(omm::CliParams **)&_swig_go_0;

  result = (omm::Files *)& ((arg1)->Files);
  *(omm::Files **)&_swig_go_result = (omm::Files *)result;
  return _swig_go_result;
}


omm::CliParams *_wrap_new_CliParams_bind_a8cb6205d990f6b5() {
  omm::CliParams *result = 0 ;
  omm::CliParams *_swig_go_result;


  result = (omm::CliParams *)new omm::CliParams();
  *(omm::CliParams **)&_swig_go_result = (omm::CliParams *)result;
  return _swig_go_result;
}


void _wrap_delete_CliParams_bind_a8cb6205d990f6b5(omm::CliParams *_swig_go_0) {
  omm::CliParams *arg1 = (omm::CliParams *) 0 ;

  arg1 = *(omm::CliParams **)&_swig_go_0;

  delete arg1;

}


#ifdef __cplusplus
}
#endif
